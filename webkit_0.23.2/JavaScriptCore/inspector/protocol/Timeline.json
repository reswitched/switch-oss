{
    "domain": "Timeline",
    "description": "Timeline provides its clients with instrumentation records that are generated during the page runtime. Timeline instrumentation can be started and stopped using corresponding commands. While timeline is started, it is generating timeline event records.",
    "availability": "web",
    "types": [
        {
            "id": "EventType",
            "type": "string",
            "enum": [
                "EventDispatch",
                "ScheduleStyleRecalculation",
                "RecalculateStyles",
                "InvalidateLayout",
                "Layout",
                "Paint",
                "Composite",
                "RenderingFrame",
                "ScrollLayer",
                "TimerInstall",
                "TimerRemove",
                "TimerFire",
                "EvaluateScript",
                "TimeStamp",
                "Time",
                "TimeEnd",
                "XHRReadyStateChange",
                "XHRLoad",
                "FunctionCall",
                "ProbeSample",
                "ConsoleProfile",
                "GCEvent",
                "RequestAnimationFrame",
                "CancelAnimationFrame",
                "FireAnimationFrame",
                "WebSocketCreate",
                "WebSocketSendHandshakeRequest",
                "WebSocketReceiveHandshakeResponse",
                "WebSocketDestroy"
            ],
            "description": "Timeline record type."
        },
        {
            "id": "TimelineEvent",
            "type": "object",
            "properties": [
                { "name": "type", "$ref": "EventType", "description": "Event type." },
                { "name": "data", "type": "object", "description": "Event data." },
                { "name": "children", "type": "array", "optional": true, "items": { "$ref": "TimelineEvent" }, "description": "Nested records." }
            ],
            "description": "Timeline record contains information about the recorded activity."
        }
    ],
    "commands": [
        {
            "name": "start",
            "parameters": [
                { "name": "maxCallStackDepth", "optional": true, "type": "integer", "description": "Samples JavaScript stack traces up to <code>maxCallStackDepth</code>, defaults to 5." }
            ],
            "description": "Starts capturing instrumentation events."
        },
        {
            "name": "stop",
            "description": "Stops capturing instrumentation events."
        },
        {
            "name": "setAutoCaptureEnabled",
            "description": "Toggle auto capture state. If <code>true</code> the backend will disable breakpoints and start capturing on navigation. The backend will fire the <code>autoCaptureStarted</code> event when an auto capture starts. The frontend should stop the auto capture when appropriate and re-enable breakpoints.",
            "parameters": [
                { "name": "enabled", "type": "boolean", "description": "New auto capture state." }
            ]
        }
    ],
    "events": [
        {
            "name": "eventRecorded",
            "parameters": [
                { "name": "record", "$ref": "TimelineEvent", "description": "Timeline event record data." }
            ],
            "description": "Fired for every instrumentation event while timeline is started."
        },
        {
            "name": "recordingStarted",
            "parameters": [
                { "name": "startTime", "type": "number", "description": "Start time of this new recording." }
            ],
            "description": "Fired when recording has started."
        },
        {
            "name": "recordingStopped",
            "parameters": [
                { "name": "endTime", "type": "number", "description": "End time of this recording." }
            ],
            "description": "Fired when recording has stopped."
        },
        {
            "name": "autoCaptureStarted",
            "description": "Fired when auto capture started."
        }
    ]
}
